{"version":3,"file":"static/js/784.c60a5dad.chunk.js","mappings":"sQAGaA,EAAaC,EAAAA,EAAAA,MAAH,0MAWVC,EAAYD,EAAAA,EAAAA,OAAH,2CAITE,GAAWF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,sC,iKCLfI,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KACHG,SAAS,YACTC,QARH,2HAMM,2IAMNC,MAAOL,EAAAA,KACJG,SAAS,YACTC,QAXH,qFAaI,kGAIOE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAc7B,OACE,SAAC,KAAD,CACEC,cAAe,CACbV,KAAM,GACNG,MAAO,IAETQ,iBAAkBd,EAClBe,SAnBiB,SAACC,EAAQC,GAGZP,EAASQ,KAAI,qBAAGf,IAAH,IAAoBgB,SAASH,EAAOb,MAG7DiB,MAAM,GAAD,OAAIJ,EAAOb,KAAX,4BALsBK,GAASa,EAAAA,EAAAA,IAAWL,IAQnDC,EAAQK,WACT,EAGC,UAQE,UAAC,KAAD,YACE,UAAC,KAAD,CAAYC,QAAQ,OAApB,UAA2B,QAEzB,SAAC,KAAD,CAAOC,GAAG,OAAOC,KAAK,OAAOtB,KAAK,aAEpC,SAAC,KAAD,CAAUA,KAAK,OAAOuB,UAAU,UAChC,UAAC,KAAD,CAAYH,QAAQ,QAApB,UAA4B,UAE1B,SAAC,KAAD,CAAOC,GAAG,QAAQC,KAAK,MAAMtB,KAAK,cAEpC,SAAC,KAAD,CAAUA,KAAK,QAAQuB,UAAU,UACjC,SAAC,KAAD,CAAWD,KAAK,SAAhB,SAAyB,oBAIhC,E,8BClEYE,EAAc/B,EAAAA,EAAAA,MAAH,uMCEXgC,EAAS,WACpB,IAAMpB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,UAACkB,EAAD,CAAaJ,QAAQ,SAArB,UAA8B,yBAE5B,kBACEE,KAAK,OACLD,GAAG,SACHrB,KAAK,SACL0B,SAAU,SAAAC,GAAG,OAAItB,GAASuB,EAAAA,EAAAA,GAAiBD,EAAIE,OAAOC,MAAMC,eAA/C,QAKtB,EClBYC,EAAevC,EAAAA,EAAAA,OAAH,4CAIZwC,EAAexC,EAAAA,EAAAA,GAAH,wGAMZyC,EAAezC,EAAAA,EAAAA,GAAH,6CCHZ0C,EAAW,WACtB,IAAM9B,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAY4B,EAAAA,IAE7B,OACE,SAACH,EAAD,iBACG1B,QADH,IACGA,OADH,EACGA,EAAUQ,KAAI,gBAAGM,EAAH,EAAGA,GAAIrB,EAAP,EAAOA,KAAMqC,EAAb,EAAaA,OAAb,OACb,UAACH,EAAD,WACGlC,EAAK,KAAGqC,GACT,SAACL,EAAD,CACEV,KAAK,SACLgB,QAAS,kBAAMjC,GAASkC,EAAAA,EAAAA,IAAclB,GAA7B,EAFX,SAGC,aALgBA,EADN,KAapB,E,UC1BYmB,EAAY/C,EAAAA,EAAAA,IAAH,0CCQP,SAASgD,IACtB,IAAMC,GAAelC,EAAAA,EAAAA,IAAYmC,EAAAA,IAC3BtC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAsC,EAAAA,EAAAA,YAAU,WACRvC,GAASwC,EAAAA,EAAAA,MACV,GAAE,CAACxC,KAGF,UAACmC,EAAD,YACE,SAACpC,EAAD,KACA,SAACqB,EAAD,IACCiB,EAAeI,EAAAA,GAAAA,MAAYJ,IAAgB,SAACP,EAAD,MAGjD,C","sources":["components/ContactForm/ContactForm.styled .js","components/ContactForm/ContactForm .jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contacts/ContactList .styled.js","components/Contacts/ContactList .jsx","components/Container.styled.js","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ErrorMessage } from 'formik';\n\nexport const EntryField = styled.label`\n  width: fit-content;\n  margin-bottom: 10px;\n  display: flex;\n  gap: 5px;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-content: space-around;\n  text-align: left;\n`;\n\nexport const AddButton = styled.button`\n  margin: 0 auto;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n`;\n","import * as Yup from 'yup';\nimport { Formik, Field, Form } from 'formik';\nimport { AddButton, EntryField, ErrorMsg } from './ContactForm.styled ';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst nameRegExp =\n  /^[a-zA-Zа-яА-Я]+(([' \\\\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst phoneRegExp =\n  /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/;\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .required('Required')\n    .matches(\n      nameRegExp,\n      ` Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan`\n    ),\n  phone: Yup.string()\n    .required('Required')\n    .matches(\n      phoneRegExp,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, actions) => {\n    const handleAddContact = () => dispatch(addContact(values));\n\n    const overlap = contacts.map(({ name }) => name).includes(values.name);\n\n    overlap\n      ? alert(`${values.name} is already in contacts`)\n      : handleAddContact();\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        phone: '',\n      }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <EntryField htmlFor=\"name\">\n          Name\n          <Field id=\"name\" type=\"text\" name=\"name\" />\n        </EntryField>\n        <ErrorMsg name=\"name\" component=\"span\" />\n        <EntryField htmlFor=\"phone\">\n          Number\n          <Field id=\"phone\" type=\"tel\" name=\"phone\" />\n        </EntryField>\n        <ErrorMsg name=\"phone\" component=\"span\" />\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  width: fit-content;\n  margin-top: 10px;\n  display: flex;\n  gap: 5px;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-content: space-around;\n  text-align: left;\n`;\n","import { useDispatch } from \"react-redux\";\nimport { filterUserByName } from 'redux/contacts/filterSlice';\nimport { FilterLabel } from \"./Filter.styled\";\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <FilterLabel htmlFor=\"filter\">\n        Find contacts by name\n        <input\n          type=\"text\"\n          id=\"filter\"\n          name=\"filter\"\n          onChange={evt => dispatch(filterUserByName(evt.target.value.toLowerCase()))}\n        />\n      </FilterLabel>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ButtonDelete = styled.button`\nmargin-left: 20px;\n`\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding:0;\n  margin-left:15px;\n`;\nexport const ContactsItem = styled.li`\n  margin-top: 15px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ButtonDelete,\n  ContactsItem,\n  ContactsList,\n} from './ContactList .styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactsList>\n      {contacts?.map(({ id, name, number }) => (\n        <ContactsItem key={id}>\n          {name}: {number}\n          <ButtonDelete\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </ButtonDelete>\n        </ContactsItem>\n      ))}\n    </ContactsList>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding: 25px;\n`;\n","import toast from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm ';\nimport { Filter } from 'components/Filter/Filter';\nimport { Contacts } from '../components/Contacts/ContactList ';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container } from 'components/Container.styled';\n\nexport default function ContactsPage() {\n  const errorMessage = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <ContactForm />\n      <Filter />\n      {errorMessage ? toast.error(errorMessage) : <Contacts />}\n    </Container>\n  );\n};\n"],"names":["EntryField","styled","AddButton","ErrorMsg","ErrorMessage","schema","Yup","shape","name","required","matches","phone","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","initialValues","validationSchema","onSubmit","values","actions","map","includes","alert","addContact","resetForm","htmlFor","id","type","component","FilterLabel","Filter","onChange","evt","filterUserByName","target","value","toLowerCase","ButtonDelete","ContactsList","ContactsItem","Contacts","selectVisibleContacts","number","onClick","deleteContact","Container","ContactsPage","errorMessage","selectError","useEffect","fetchContacts","toast"],"sourceRoot":""}